#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct Node {
    char data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(char data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

Node* constructExpressionTreeFromPostfix(char* postfix) {
    Node* stack[100];
    int top = -1;

    for (int i = 0; postfix[i]; i++) {
        Node* newNode = createNode(postfix[i]);
        if (!isOperator(postfix[i])) {
            stack[++top] = newNode;
        } else {
            newNode->right = stack[top--];
            newNode->left = stack[top--];
            stack[++top] = newNode;
        }
    }
    return stack[top];
}

Node* constructExpressionTreeFromPrefix(char* prefix) {
    Node* stack[100];
    int top = -1;
    int len = strlen(prefix);

    for (int i = len - 1; i >= 0; i--) {
        Node* newNode = createNode(prefix[i]);
        if (!isOperator(prefix[i])) {
            stack[++top] = newNode;
        } else {
            newNode->left = stack[top--];
            newNode->right = stack[top--];
            stack[++top] = newNode;
        }
    }
    return stack[top];
}

void inorderRecursive(Node* root) {
    if (root) {
        inorderRecursive(root->left);
        printf("%c ", root->data);
        inorderRecursive(root->right);
    }
}

void preorderRecursive(Node* root) {
    if (root) {
        printf("%c ", root->data);
        preorderRecursive(root->left);
        preorderRecursive(root->right);
    }
}

void postorderRecursive(Node* root) {
    if (root) {
        postorderRecursive(root->left);
        postorderRecursive(root->right);
        printf("%c ", root->data);
    }
}

void inorderNonRecursive(Node* root) {
    Node* stack[100];
    int top = -1;
    Node* current = root;

    while (current || top >= 0) {
        while (current) {
            stack[++top] = current;
            current = current->left;
        }
        current = stack[top--];
        printf("%c ", current->data);
        current = current->right;
    }
}

void preorderNonRecursive(Node* root) {
    Node* stack[100];
    int top = -1;
    stack[++top] = root;

    while (top >= 0) {
        Node* current = stack[top--];
        printf("%c ", current->data);
        if (current->right) {
            stack[++top] = current->right;
        }
        if (current->left) {
            stack[++top] = current->left;
        }
    }
}

void postorderNonRecursive(Node* root) {
    Node* stack1[100];
    Node* stack2[100];
    int top1 = -1, top2 = -1;
    stack1[++top1] = root;

    while (top1 >= 0) {
        Node* current = stack1[top1--];
        stack2[++top2] = current;
        if (current->left) {
            stack1[++top1] = current->left;
        }
        if (current->right) {
            stack1[++top1] = current->right;
        }
    }

    while (top2 >= 0) {
        printf("%c ", stack2[top2--]->data);
    }
}

int main() {
    char postfix[] = "ab+ef*g*-";
    char prefix[] = "-+ab*efg";

    Node* postfixRoot = constructExpressionTreeFromPostfix(postfix);
    Node* prefixRoot = constructExpressionTreeFromPrefix(prefix);

    printf("Postfix Expression Tree In-order: ");
    inorderRecursive(postfixRoot);
    printf("\nPostfix Expression Tree Pre-order: ");
    preorderRecursive(postfixRoot);
    printf("\nPostfix Expression Tree Post-order: ");
    postorderRecursive(postfixRoot);

    printf("\n\nPrefix Expression Tree In-order: ");
    inorderRecursive(prefixRoot);
    printf("\nPrefix Expression Tree Pre-order: ");
    preorderRecursive(prefixRoot);
    printf("\nPrefix Expression Tree Post-order: ");
    postorderRecursive(prefixRoot);

    printf("\n\nNon-Recursive Traversals:\n");
    printf("Postfix Expression Tree In-order: ");
    inorderNonRecursive(postfixRoot);
    printf("\nPostfix Expression Tree Pre-order: ");
    preorderNonRecursive(postfixRoot);
    printf("\nPostfix Expression Tree Post-order: ");
    postorderNonRecursive(postfixRoot);

    return 0;
}
